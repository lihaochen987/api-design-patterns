/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/product": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a product */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateProductRequest"];
                    "text/json": components["schemas"]["CreateProductRequest"];
                    "application/*+json": components["schemas"]["CreateProductRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: Record<string, unknown>;
                    content: {
                        "text/plain": components["schemas"]["CreateProductResponse"];
                        "application/json": components["schemas"]["CreateProductResponse"];
                        "text/json": components["schemas"]["CreateProductResponse"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: Record<string, unknown>;
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/review": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a review */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateReviewRequest"];
                    "text/json": components["schemas"]["CreateReviewRequest"];
                    "application/*+json": components["schemas"]["CreateReviewRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: Record<string, unknown>;
                    content: {
                        "text/plain": components["schemas"]["CreateReviewResponse"];
                        "application/json": components["schemas"]["CreateReviewResponse"];
                        "text/json": components["schemas"]["CreateReviewResponse"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: Record<string, unknown>;
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a product */
        get: {
            parameters: {
                query?: {
                    FieldMask?: string[];
                };
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: Record<string, unknown>;
                    content: {
                        "text/plain": components["schemas"]["GetProductResponse"] | components["schemas"]["GetPetFoodResponse"] | components["schemas"]["GetGroomingAndHygieneResponse"];
                        "application/json": components["schemas"]["GetProductResponse"] | components["schemas"]["GetPetFoodResponse"] | components["schemas"]["GetGroomingAndHygieneResponse"];
                        "text/json": components["schemas"]["GetProductResponse"] | components["schemas"]["GetPetFoodResponse"] | components["schemas"]["GetGroomingAndHygieneResponse"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: Record<string, unknown>;
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        /** Replace a product */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ReplaceProductRequest"];
                    "text/json": components["schemas"]["ReplaceProductRequest"];
                    "application/*+json": components["schemas"]["ReplaceProductRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: Record<string, unknown>;
                    content: {
                        "text/plain": components["schemas"]["ReplaceProductResponse"];
                        "application/json": components["schemas"]["ReplaceProductResponse"];
                        "text/json": components["schemas"]["ReplaceProductResponse"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: Record<string, unknown>;
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        post?: never;
        /** Delete a product */
        delete: {
            parameters: {
                query?: {
                    request?: components["schemas"]["DeleteProductRequest"];
                };
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: Record<string, unknown>;
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /** Update a product */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateProductRequest"];
                    "text/json": components["schemas"]["UpdateProductRequest"];
                    "application/*+json": components["schemas"]["UpdateProductRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: Record<string, unknown>;
                    content: {
                        "text/plain": components["schemas"]["UpdateProductResponse"];
                        "application/json": components["schemas"]["UpdateProductResponse"];
                        "text/json": components["schemas"]["UpdateProductResponse"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: Record<string, unknown>;
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/review/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a review */
        get: {
            parameters: {
                query?: {
                    FieldMask?: string[];
                };
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: Record<string, unknown>;
                    content: {
                        "text/plain": components["schemas"]["GetReviewResponse"];
                        "application/json": components["schemas"]["GetReviewResponse"];
                        "text/json": components["schemas"]["GetReviewResponse"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: Record<string, unknown>;
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        /** Replace a review */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ReplaceReviewRequest"];
                    "text/json": components["schemas"]["ReplaceReviewRequest"];
                    "application/*+json": components["schemas"]["ReplaceReviewRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: Record<string, unknown>;
                    content: {
                        "text/plain": components["schemas"]["ReplaceReviewResponse"];
                        "application/json": components["schemas"]["ReplaceReviewResponse"];
                        "text/json": components["schemas"]["ReplaceReviewResponse"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: Record<string, unknown>;
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        post?: never;
        /** Delete a review */
        delete: {
            parameters: {
                query?: {
                    request?: components["schemas"]["DeleteReviewRequest"];
                };
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: Record<string, unknown>;
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /** Update a review */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateReviewRequest"];
                    "text/json": components["schemas"]["UpdateReviewRequest"];
                    "application/*+json": components["schemas"]["UpdateReviewRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: Record<string, unknown>;
                    content: {
                        "text/plain": components["schemas"]["UpdateReviewResponse"];
                        "application/json": components["schemas"]["UpdateReviewResponse"];
                        "text/json": components["schemas"]["UpdateReviewResponse"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: Record<string, unknown>;
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/product/{id}/pricing": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a product pricing */
        get: {
            parameters: {
                query?: {
                    FieldMask?: string[];
                };
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: Record<string, unknown>;
                    content: {
                        "text/plain": components["schemas"]["GetProductPricingResponse"];
                        "application/json": components["schemas"]["GetProductPricingResponse"];
                        "text/json": components["schemas"]["GetProductPricingResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update a product pricing */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateProductPricingRequest"];
                    "text/json": components["schemas"]["UpdateProductPricingRequest"];
                    "application/*+json": components["schemas"]["UpdateProductPricingRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: Record<string, unknown>;
                    content: {
                        "text/plain": components["schemas"]["UpdateProductPricingResponse"];
                        "application/json": components["schemas"]["UpdateProductPricingResponse"];
                        "text/json": components["schemas"]["UpdateProductPricingResponse"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List products */
        get: {
            parameters: {
                query?: {
                    Parent?: string;
                    Filter?: string;
                    PageToken?: string;
                    MaxPageSize?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: Record<string, unknown>;
                    content: {
                        "text/plain": components["schemas"]["ListProductsResponse"];
                        "application/json": components["schemas"]["ListProductsResponse"];
                        "text/json": components["schemas"]["ListProductsResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reviews": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List reviews */
        get: {
            parameters: {
                query?: {
                    Parent?: string;
                    Filter?: string;
                    PageToken?: string;
                    MaxPageSize?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: Record<string, unknown>;
                    content: {
                        "text/plain": components["schemas"]["ListReviewsResponse"];
                        "application/json": components["schemas"]["ListReviewsResponse"];
                        "text/json": components["schemas"]["ListReviewsResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}

export type webhooks = Record<string, never>;

export interface components {
    schemas: {
        CreateProductRequest: {
            name: string;
            pricing: components["schemas"]["ProductPricingRequest"];
            category: string;
            dimensions: components["schemas"]["DimensionsRequest"];
            ageGroup?: string | null;
            breedSize?: string | null;
            ingredients?: string | null;
            nutritionalInfo?: Record<string, unknown> | null;
            storageInstructions?: string | null;
            weightKg?: string | null;
            isNatural?: boolean | null;
            isHypoAllergenic?: boolean | null;
            usageInstructions?: string | null;
            isCrueltyFree?: boolean | null;
            safetyWarnings?: string | null;
        };
        CreateProductResponse: {
            id: string;
            name: string;
            pricing: components["schemas"]["ProductPricingResponse"];
            category: string;
            dimensions: components["schemas"]["DimensionsResponse"];
        };
        CreateReviewRequest: {
            productId: string;
            rating: string;
            text: string;
            createdAt?: string | null;
        };
        CreateReviewResponse: {
            id: string;
            productId: string;
            rating: string;
            text: string;
            createdAt: string;
            updatedAt: string;
        };
        DeleteProductRequest: Record<string, never>;
        DeleteReviewRequest: Record<string, never>;
        DimensionsRequest: {
            length?: string | null;
            width?: string | null;
            height?: string | null;
        };
        DimensionsResponse: {
            length: string;
            width: string;
            height: string;
        };
        GetGroomingAndHygieneResponse: {
            isNatural: boolean;
            isHypoAllergenic: boolean;
            usageInstructions: string;
            isCrueltyFree: boolean;
            safetyWarnings: string;
        } & components["schemas"]["GetProductResponse"];
        GetPetFoodResponse: {
            ageGroup: string;
            breedSize: string;
            ingredients: string;
            nutritionalInfo: Record<string, string>;
            storageInstructions: string;
            weightKg: string;
        } & components["schemas"]["GetProductResponse"];
        GetProductPricingResponse: {
            id: string;
            basePrice: string;
            discountPercentage: string;
            taxRate: string;
        };
        GetProductResponse: {
            id: string;
            name: string;
            price: string;
            category: string;
            dimensions: components["schemas"]["DimensionsResponse"];
        };
        GetReviewResponse: {
            id: string;
            productId: string;
            rating: string;
            text: string;
            createdAt: string;
            updatedAt: string;
        };
        ListProductsResponse: {
            results: unknown[];
            nextPageToken: string;
        };
        ListReviewsResponse: {
            results: components["schemas"]["GetReviewResponse"][];
            nextPageToken: string;
        };
        ProblemDetails: {
            type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            detail?: string | null;
            instance?: string | null;
        } & Record<string, unknown>;
        ProductPricingRequest: {
            basePrice?: string | null;
            discountPercentage?: string | null;
            taxRate?: string | null;
        };
        ProductPricingResponse: {
            basePrice: string;
            discountPercentage: string;
            taxRate: string;
        };
        ReplaceProductRequest: {
            name: string;
            pricing: components["schemas"]["ProductPricingRequest"];
            category: string;
            dimensions: components["schemas"]["DimensionsRequest"];
            ageGroup?: string | null;
            breedSize?: string | null;
            ingredients?: string | null;
            nutritionalInfo?: Record<string, unknown> | null;
            storageInstructions?: string | null;
            weightKg?: string | null;
            isNatural?: boolean | null;
            isHypoAllergenic?: boolean | null;
            usageInstructions?: string | null;
            isCrueltyFree?: boolean | null;
            safetyWarnings?: string | null;
        };
        ReplaceProductResponse: {
            name: string;
            pricing: components["schemas"]["ProductPricingResponse"];
            category: string;
            dimensions: components["schemas"]["DimensionsResponse"];
        };
        ReplaceReviewRequest: {
            productId: string;
            rating: string;
            text: string;
            updatedAt?: string | null;
        };
        ReplaceReviewResponse: {
            id: string;
            productId: string;
            rating: string;
            text: string;
            createdAt: string;
            updatedAt: string;
        };
        UpdateProductPricingRequest: {
            basePrice?: string | null;
            discountPercentage?: string | null;
            taxRate?: string | null;
            fieldMask?: string[] | null;
        };
        UpdateProductPricingResponse: {
            id: string;
            basePrice: string;
            discountPercentage: string;
            taxRate: string;
        };
        UpdateProductRequest: {
            name?: string | null;
            pricing?: components["schemas"]["ProductPricingRequest"];
            category?: string | null;
            dimensions?: components["schemas"]["DimensionsRequest"];
            ageGroup?: string | null;
            breedSize?: string | null;
            ingredients?: string | null;
            nutritionalInfo?: Record<string, unknown> | null;
            storageInstructions?: string | null;
            weightKg?: string | null;
            isNatural?: boolean | null;
            isHypoAllergenic?: boolean | null;
            usageInstructions?: string | null;
            isCrueltyFree?: boolean | null;
            safetyWarnings?: string | null;
            fieldMask?: string[] | null;
        };
        UpdateProductResponse: {
            id: string;
            name: string;
            pricing: components["schemas"]["ProductPricingResponse"];
            category: string;
            dimensions: components["schemas"]["DimensionsResponse"];
        };
        UpdateReviewRequest: {
            productId?: string | null;
            rating?: string | null;
            text?: string | null;
            createdAt?: string | null;
            updatedAt?: string | null;
            fieldMask?: string[] | null;
        };
        UpdateReviewResponse: {
            id: string;
            productId: string;
            rating: string;
            text: string;
            createdAt: string;
            updatedAt: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}

export type $defs = Record<string, never>;
export type operations = Record<string, never>;
